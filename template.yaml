Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: Slack-Notifier
    Description: Slack Notifier
    Author: Chris He
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README_sar.md
    Labels: ['Slack', 'Eventbridge']
    HomePageUrl: https://github.com/Chris-wa-He/AWS-Lambda-notifier
    SemanticVersion: 1.3.0
    SourceCodeUrl: https://github.com/Chris-wa-He/AWS-Lambda-notifier


Parameters:
  WebhookURL:
    Type: String
    Description: "Slack Webhook URL"

  AnomalyThreshold:
    Type: Number
    Default: 100
    Description: "Threshold for service anomaly use."

Resources:
  SlackNotifierLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SlackNotifierCommon
      Description: v.1.0.5
      ContentUri: layer/
      CompatibleRuntimes:
      - python3.6
      - python3.7
      - python3.8
      - python3.9

  SlackNotifierLambda:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: notifier/
      Handler: app.lambda_handler
      Layers: 
        - !Ref SlackNotifierLambdaLayer
      Environment:
        Variables:
          SECRET_ARN:
            Ref: WebhookSecret
      Runtime: python3.9
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref WebhookSecret
      Events:
        SNSEvent:
          Type: SNS
          Properties: 
            Topic: !Ref SlackNotifierSNSTopic
          
  SlackNotifierSNSTopic:
    Type: AWS::SNS::Topic

  SlackNotifierSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: Default_Statement
            Effect: Allow
            Principal:
              AWS: "*"
            Action: 
              - sns:Publish
            Resource: !Ref SlackNotifierSNSTopic
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref "AWS::AccountId"
          - Sid: Eventbridge_Statement
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action: 
              - sns:Publish
            Resource: !Ref SlackNotifierSNSTopic
          - Sid: Costalerts_Statement
            Effect: Allow
            Principal:
              Service: "costalerts.amazonaws.com"
            Action:
              - sns:Publish
            Resource: !Ref SlackNotifierSNSTopic
      Topics:
      - !Ref SlackNotifierSNSTopic

  WebhookSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: 'Webhook URL'
      SecretString:
        Ref: WebhookURL

  AnomalyServiceMonitor:
    Type: "AWS::CE::AnomalyMonitor"
    Properties:
      MonitorName: "AllServiceMonitor"
      MonitorType: "DIMENSIONAL"
      MonitorDimension: "SERVICE"

  AnomalySubscription:
    Type: "AWS::CE::AnomalySubscription"
    Properties:
      SubscriptionName: "AnomalyServiceMonitoring"
      Threshold: !Ref AnomalyThreshold
      Frequency: "IMMEDIATE"
      MonitorArnList:
        - !Ref AnomalyServiceMonitor
      Subscribers:
        - Type: "SNS"
          Address: !Ref SlackNotifierSNSTopic

  EventRuleEC2StateChange:
    Type: AWS::Events::Rule
    Properties:
      Description: Slack notification：EC2 instance state change
      EventPattern: 
        source: 
          - aws.ec2
        detail-type: 
          - EC2 Instance State-change Notification
        detail:
          state:
            - running
            - stopped
            - terminated
      Targets:
        - Arn: !Ref SlackNotifierSNSTopic
          Id: Send2SNS
          InputTransformer:
            InputPathsMap:
              instance-id: "$.detail.instance-id"
              region: "$.region"
              state: "$.detail.state"
              time: "$.time"
            InputTemplate:
              "\"EC2状态变化告警: \\n时间: <time> \\n区域: <region> \\n实例id: <instance-id> \\n状态: <state>\""

  EventRuleEC2Health:
    Type: AWS::Events::Rule
    Properties:
      Description: Slack notification：AWS Health event
      EventPattern: 
        source: 
          - aws.health
        detail-type: 
          - AWS Health Event
      Targets:
        - Arn: !Ref SlackNotifierSNSTopic
          Id: Send2SNS
          InputTransformer:
            InputPathsMap:
              resource: "$.resources[0]"
              region: "$.region"
              time: "$.time"
              type: "$.detail.eventTypeCode"
              desc: "$.detail.eventDescription[0].latestDescription"
            InputTemplate:
              "\"AWS健康事件: \\n时间: <time> \\n区域: <region> \\n受影响资源: <resource> \\n类型: <type> \\n描述: <desc>\""

  EventRuleDuardDutyFinding:
    Type: AWS::Events::Rule
    Properties:
      Description: Notification rule：DuardDuty Finding
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
        detail:
          severity: [ { "numeric": [ ">=", 4 ] } ]
      Targets:
        - Arn: !Ref SlackNotifierSNSTopic
          Id: Send2SNS
          InputTransformer:
            InputPathsMap:
              severity: "$.detail.severity"
              Finding_ID: "$.detail.id"
              instanceId: "$.detail.resource.instanceDetails.instanceId"
              port: "$.detail.service.action.networkConnectionAction.localPortDetails.port"
              eventFirstSeen: "$.detail.service.eventFirstSeen"
              eventLastSeen: "$.detail.service.eventLastSeen"
              count: "$.detail.service.count"
              Finding_Type: "$.detail.type"
              region: "$.region"
              time: "$.time"
              title: "$.detail.title"
              Finding_description: "$.detail.description"
            InputTemplate:
              "\"Guard Duty 发现异常事件: \\n时间: <time> \\n区域: <region> \\n可疑行为等级: <severity> \\n可疑行为类型: <Finding_Type> \\n可疑行为名称: <title> \\n描述: <Finding_description> \\n已发生次数: <count> \\n事件链接: https://console.aws.amazon.com/guardduty/home?region=<region>#/findings?search=id%3D<Finding_ID> \\n请尽快处理！\""
